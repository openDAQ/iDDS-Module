module iDDS {
  struct Msg
  {
    long userID;
    string message;
  };

  // Constant Values
  const long MAXIMUM_EVENT_DESCRIPTION_LENGTH = 512;
  const long MAXIMUM_HARDWARE_VERSION_LENGTH = 64;
  const long MAXIMUM_LOGICAL_NODE_ID_LENGTH = 16;
  const long MAXIMUM_MANUFACTURER_LENGTH = 64;
  const long MAXIMUM_MESSAGE_BODY_LENGTH = 2048;
  const long MAXIMUM_NODE_CONFIGURATION_ITEMS = 32;
  const long MAXIMUM_NODE_CONFIGURATION_ITEM_NAME_LENGTH = 32;
  const long MAXIMUM_NODE_CONFIGURATION_ITEM_VERSION_LENGTH = 16;
  const long MAXIMUM_PARAMETER_NAME_LENGTH = 64;
  const long MAXIMUM_PARTITION_NAME_LENGTH = 64;
  const long MAXIMUM_PRODUCT_TYPE_LENGTH = 64;
  const long MAXIMUM_SERIAL_NUMBER_LENGTH = 64;
  const long MAXIMUM_SOFTWARE_VERSION_LENGTH = 64;
  const long MAXIMUM_STREAMING_DDS_METHODS = 16;
  const long MAXIMUM_TOPIC_NAME_LENGTH = 64;
  const long MAXIMUM_UNITS_LENGTH = 32;
  const long MAXIMUM_URL_LENGTH = 8192;

  typedef string<MAXIMUM_LOGICAL_NODE_ID_LENGTH> LogicalNodeID;
  typedef string<MAXIMUM_PARAMETER_NAME_LENGTH> ParameterName;
  typedef unsigned long ParameterID;
  typedef long DomainID;
  typedef unsigned long ReferenceNumber;

  struct RealNodeID{
    string<MAXIMUM_MANUFACTURER_LENGTH> manufacturer;
    string<MAXIMUM_PRODUCT_TYPE_LENGTH> productType;
    string<MAXIMUM_SERIAL_NUMBER_LENGTH> serialNumber;
  };

  struct BuildStandard{
    string<MAXIMUM_HARDWARE_VERSION_LENGTH> hardwareVersion;
    string<MAXIMUM_SOFTWARE_VERSION_LENGTH> softwareVersion;
  };

  struct NodeConfigurationItem{
    string<MAXIMUM_NODE_CONFIGURATION_ITEM_NAME_LENGTH> name;
    string<MAXIMUM_NODE_CONFIGURATION_ITEM_VERSION_LENGTH> version;
    string<MAXIMUM_URL_LENGTH> URL;
  };

  typedef sequence<NodeConfigurationItem, MAXIMUM_NODE_CONFIGURATION_ITEMS> NodeConfigurationItems;

  struct Time{
    unsigned long seconds;
    unsigned long nanoseconds;
  };

  enum DataType{
    DataTypeFloat,
    DataTypeLong,
    DataTypeShort,
    DataTypeUnsignedLong,
    DataTypeUnsignedShort,
    DataTypeOctet,
    DataTypeFourOctets,
    DataTypeBoolean
  };


  //New implementation
  enum OperationalStatus{
    OpStatusDefault,
    OpStatusGettingLogicalID,
    OpStatusGettingNodeBackboneConfiguration,
    OpStatusGettingNodeApplicationConfiguration,
    OpStatusConfiguring,
    OpStatusReady,
    OpStatusCalibrating,
    OpStatusOperating,
    OpStatusFaulted
  };

  //AboutNode Struct - Used for Node Advertisement
  struct AboutNode {
    @key RealNodeID aboutRealNodeID;
    BuildStandard aboutNodeBuildStandard;
    OperationalStatus aboutOperationalStatus;
    string<64> statusReason;
    LogicalNodeID aboutLogicalNodeID;
    DomainID aboutDomainID;
    string<40> ipAddress;
    Time aboutTime;
  };

  //Message Struct - Used for Sending and Receiving Message
  @topic
  struct Message{
    LogicalNodeID                        targetLogicalNodeID;
    LogicalNodeID                        sourceLogicalNodeID;
    string<MAXIMUM_MESSAGE_BODY_LENGTH>  messageBody;
    ReferenceNumber                      myReferenceNumber;
    ReferenceNumber                      yourReferenceNumber;
    Time                                 time;
    unsigned long                        fragmentNumber;
    boolean                              moreFragments;
  };
};